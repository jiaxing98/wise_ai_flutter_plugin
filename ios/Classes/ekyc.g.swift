// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct PEkycRequest {
  var countryCode: String
  var idType: String
  var backCamera: Bool

  static func fromList(_ list: [Any?]) -> PEkycRequest? {
    let countryCode = list[0] as! String
    let idType = list[1] as! String
    let backCamera = list[2] as! Bool

    return PEkycRequest(
      countryCode: countryCode,
      idType: idType,
      backCamera: backCamera
    )
  }
  func toList() -> [Any?] {
    return [
      countryCode,
      idType,
      backCamera,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PEkycConfig {
  var token: String
  var endpoint: String

  static func fromList(_ list: [Any?]) -> PEkycConfig? {
    let token = list[0] as! String
    let endpoint = list[1] as! String

    return PEkycConfig(
      token: token,
      endpoint: endpoint
    )
  }
  func toList() -> [Any?] {
    return [
      token,
      endpoint,
    ]
  }
}

private class EkycHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return PEkycConfig.fromList(self.readValue() as! [Any?])
    case 129:
      return PEkycRequest.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class EkycHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PEkycConfig {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PEkycRequest {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class EkycHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return EkycHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return EkycHostApiCodecWriter(data: data)
  }
}

class EkycHostApiCodec: FlutterStandardMessageCodec {
  static let shared = EkycHostApiCodec(readerWriter: EkycHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol EkycHostApi {
  func getPlatformVersion(completion: @escaping (Result<String, Error>) -> Void)
  func initialize(config: PEkycConfig, completion: @escaping (Result<Void, Error>) -> Void)
  func performEkyc(request: PEkycRequest, completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class EkycHostApiSetup {
  /// The codec used by EkycHostApi.
  static var codec: FlutterStandardMessageCodec { EkycHostApiCodec.shared }
  /// Sets up an instance of `EkycHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: EkycHostApi?) {
    let getPlatformVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.wise_ai_ekyc.EkycHostApi.getPlatformVersion", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPlatformVersionChannel.setMessageHandler { _, reply in
        api.getPlatformVersion { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPlatformVersionChannel.setMessageHandler(nil)
    }
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.wise_ai_ekyc.EkycHostApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! PEkycConfig
        api.initialize(config: configArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let performEkycChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.wise_ai_ekyc.EkycHostApi.performEkyc", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      performEkycChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! PEkycRequest
        api.performEkyc(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      performEkycChannel.setMessageHandler(nil)
    }
  }
}
